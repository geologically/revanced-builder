name: Build Automatically on Patch Update

on:
  schedule:
    - cron: "0 15 * * *" # Daily at 3 PM UTC
  workflow_dispatch:

jobs:
  check-releases-and-build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout main branch
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          submodules: true

      # Step 2: Fetch latest tags from repositories
      - name: Fetch latest tags from repos
        id: fetch_tags
        run: |
          curl -s https://api.github.com/repos/anddea/revanced-patches/releases/latest  > release_anddea.json
          curl -s https://api.github.com/repos/revanced/revanced-patches/releases/latest  > release_official.json
          curl -s https://api.github.com/repos/inotia00/revanced-patches/releases/latest  > release_extended.json

          echo "tag_anddea=$(jq -r .tag_name release_anddea.json)" >> $GITHUB_OUTPUT
          echo "tag_official=$(jq -r .tag_name release_official.json)" >> $GITHUB_OUTPUT
          echo "tag_extended=$(jq -r .tag_name release_extended.json)" >> $GITHUB_OUTPUT

      # Step 3: Initialize missing tag JSON
      - name: Initialize missing tag JSON
        id: init_tags
        run: |
          if [ ! -f last_tags.json ]; then
            jq -n --arg a "${{ steps.fetch_tags.outputs.tag_anddea }}" \
                  --arg o "${{ steps.fetch_tags.outputs.tag_official }}" \
                  --arg e "${{ steps.fetch_tags.outputs.tag_extended }}" \
                  '{ anddea: $a, official: $o, extended: $e }' > last_tags.json
            echo "missing=true" >> $GITHUB_OUTPUT
          else
            echo "missing=false" >> $GITHUB_OUTPUT
          fi

      # Step 4: Commit initialized tag file
      - name: Commit initialized tag file
        if: steps.init_tags.outputs.missing == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: main
          skip_checkout: true
          file_pattern: last_tags.json
          commit_message: "Initialize tag tracking JSON"

      # Step 5: Compare and update tag JSON
      - name: Compare and update tag JSON
        id: compare
        run: |
          LAST_ANDDEA=$(jq -r .anddea last_tags.json)
          LAST_OFFICIAL=$(jq -r .official last_tags.json)
          LAST_EXTENDED=$(jq -r .extended last_tags.json)

          NEW_ANDDEA="${{ steps.fetch_tags.outputs.tag_anddea }}"
          NEW_OFFICIAL="${{ steps.fetch_tags.outputs.tag_official }}"
          NEW_EXTENDED="${{ steps.fetch_tags.outputs.tag_extended }}"

          echo "Comparing $LAST_ANDDEA vs $NEW_ANDDEA"
          echo "Comparing $LAST_OFFICIAL vs $NEW_OFFICIAL"
          echo "Comparing $LAST_EXTENDED vs $NEW_EXTENDED"

          SHOULD_TRIGGER=0

          if [ "$NEW_ANDDEA" != "$LAST_ANDDEA" ]; then
            SHOULD_TRIGGER=1
          fi

          if [ "$NEW_OFFICIAL" != "$LAST_OFFICIAL" ]; then
            SHOULD_TRIGGER=1
          fi

          if [ "$NEW_EXTENDED" != "$LAST_EXTENDED" ]; then
            SHOULD_TRIGGER=1
          fi

          jq -n --arg a "$NEW_ANDDEA" --arg o "$NEW_OFFICIAL" --arg e "$NEW_EXTENDED" \
            '{ anddea: $a, official: $o, extended: $e }' > last_tags.json

          echo "SHOULD_TRIGGER=$SHOULD_TRIGGER" >> $GITHUB_OUTPUT
          echo "old_anddea=$LAST_ANDDEA" >> $GITHUB_OUTPUT
          echo "new_anddea=$NEW_ANDDEA" >> $GITHUB_OUTPUT
          echo "old_official=$LAST_OFFICIAL" >> $GITHUB_OUTPUT
          echo "new_official=$NEW_OFFICIAL" >> $GITHUB_OUTPUT
          echo "old_extended=$LAST_EXTENDED" >> $GITHUB_OUTPUT
          echo "new_extended=$NEW_EXTENDED" >> $GITHUB_OUTPUT

      # Step 6: Commit updated tag JSON
      - name: Commit updated tag JSON
        if: steps.compare.outputs.SHOULD_TRIGGER == '1'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: main
          skip_checkout: true
          file_pattern: last_tags.json
          commit_message: "Update last_tags.json with latest patch versions"

      # Step 7: Generate filtered config.updated.toml
      - name: Generate filtered config.updated.toml
        if: steps.compare.outputs.SHOULD_TRIGGER == '1'
        run: |
          cp config.toml config.updated.toml

          # Anddea
          if [ "${{ steps.compare.outputs.new_anddea }}" != "${{ steps.compare.outputs.old_anddea }}" ]; then
            echo "Keeping Anddea apps enabled"
          else
            awk '
              BEGIN { in_block = 0 }
              /^\[.*-Anddea\]/ { in_block = 1 }
              /^\[[^]]+\]/ && !/.*-Anddea/ { in_block = 0 }
              in_block && /enabled = true/ { sub(/enabled = true/, "enabled = false") }
              { print }
            ' config.updated.toml > tmp && mv tmp config.updated.toml
          fi

          # Official
          if [ "${{ steps.compare.outputs.new_official }}" != "${{ steps.compare.outputs.old_official }}" ]; then
            echo "Keeping official apps enabled"
          else
            awk '
              BEGIN { in_block = 0 }
              /^\[/ { in_block = 1; match($0, /^\[([^\]]+)\]/, m); section = m[1] }
              in_block && /patches-source = "revanced\/revanced-patches"/ { in_official = 1 }
              in_block && /^\[.*\]/ && !/revanced-patches/ { in_official = 0 }
              in_official && /enabled = true/ { sub(/enabled = true/, "enabled = false") }
              { print }
            ' config.updated.toml > tmp && mv tmp config.updated.toml
          fi

          # Extended
          if [ "${{ steps.compare.outputs.new_extended }}" != "${{ steps.compare.outputs.old_extended }}" ]; then
            echo "Keeping Extended apps enabled"
          else
            awk '
              BEGIN { in_block = 0 }
              /^\[.*-Extended\]/ { in_block = 1 }
              /^\[[^]]+\]/ && !/.*-Extended/ { in_block = 0 }
              in_block && /enabled = true/ { sub(/enabled = true/, "enabled = false") }
              { print }
            ' config.updated.toml > tmp && mv tmp config.updated.toml
          fi

      # Step 8: Commit updated config
      - name: Commit updated config
        if: steps.compare.outputs.SHOULD_TRIGGER == '1'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: main
          commit_message: "Update config.updated.toml for new patches"
          file_pattern: config.updated.toml

      # Step 9: Switch to update branch for build.md
      - name: Switch to update branch
        if: steps.compare.outputs.SHOULD_TRIGGER == '1'
        run: |
          git fetch origin update
          git checkout update

      # Step 10: Verify build.md exists
      - name: Verify build.md exists
        if: steps.compare.outputs.SHOULD_TRIGGER == '1'
        run: |
          if [[ -f "build.md" ]]; then
            echo "build.md found in the update branch."
          else
            echo "Error: build.md not found in the update branch."
            exit 1
          fi

      # Step 11: Process build log
      - name: Process build log
        if: steps.compare.outputs.SHOULD_TRIGGER == '1'
        run: |
          DELIM="$(openssl rand -hex 8)"
          if [[ -f "build.md" ]]; then
            echo "BUILD_LOG<<${DELIM}" >> "$GITHUB_OUTPUT"
            cat build.md >> "$GITHUB_OUTPUT"
            echo "${DELIM}" >> "$GITHUB_OUTPUT"
            cp -f build.md build.tmp
          else
            echo "Warning: build.md not found. Writing an empty BUILD_LOG."
            echo "BUILD_LOG<<${DELIM}" >> "$GITHUB_OUTPUT"
            echo "No build log available." >> "$GITHUB_OUTPUT"
            echo "${DELIM}" >> "$GITHUB_OUTPUT"
          fi

      # Step 12: Build modules/APKs
      - name: Build modules/APKs
        if: steps.compare.outputs.SHOULD_TRIGGER == '1'
        run: |
          ./build.sh config.updated.toml || ./build.sh config.toml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: $GITHUB_REPOSITORY

      # Step 13: Get next version code
      - name: Get next version code
        id: next_ver_code
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=$(gh release list -L 1 | awk -F '\t' '{print $3}')
          if [ -z "$TAG" ]; then TAG=0; fi
          echo "NEXT_VER_CODE=$((TAG + 1))" >> $GITHUB_OUTPUT

      # Step 14: Upload modules to release
      - name: Upload modules to release
        if: steps.compare.outputs.SHOULD_TRIGGER == '1'
        uses: svenstaro/upload-release-action@v2
        with:
          body: ${{ steps.get_output.outputs.BUILD_LOG }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./build/*
          release_name: ReVanced APKs
          tag: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}
          file_glob: true
          overwrite: true

      # Step 15: Update changelog and Magisk update JSON
      - name: Update changelog and Magisk update json
        if: steps.compare.outputs.SHOULD_TRIGGER == '1'
        id: update_config
        run: |
          git checkout -f update || git switch --discard-changes --orphan update
          cp -f build.tmp build.md
          get_update_json() {
            echo "{
            \"version\": \"$1\",
            \"versionCode\": ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }},
            \"zipUrl\": \"$2\",
            \"changelog\": \"https://raw.githubusercontent.com/ $GITHUB_REPOSITORY/update/build.md\"
          }"
          }

          cd build || { echo "build folder not found"; exit 1; }
          for OUTPUT in *magisk*.zip; do
            [ "$OUTPUT" = "*magisk*.zip" ] && continue
            ZIP_S=$(unzip -p "$OUTPUT" module.prop)
            if ! UPDATE_JSON=$(echo "$ZIP_S" | grep updateJson); then continue; fi
            UPDATE_JSON="${UPDATE_JSON##*/}"
            VER=$(echo "$ZIP_S" | grep version=)
            VER="${VER##*=}"
            DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}/${OUTPUT}"
            get_update_json "$VER" "$DLURL" >"../$UPDATE_JSON"
          done
          cd ..

          find . -name "*-update.json" | grep . || : >dummy-update.json

      # Step 16: Commit updated changelog and Magisk update JSON
      - name: Commit updated changelog and Magisk update JSON
        if: steps.compare.outputs.SHOULD_TRIGGER == '1'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: update
          skip_checkout: true
          file_pattern: build.md *-update.json
          commit_message: Bump version ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}
