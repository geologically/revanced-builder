name: Trigger Build on Patch Update (Dev)

on:
  schedule:
    - cron: "30 9 * * *"
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Fetch latest pre-release tags only
        id: fetch_tags
        run: |
          get_latest_prerelease_tag() {
            local repo=$1
            curl -s "https://api.github.com/repos/$repo/releases" \
              | jq -r '
                map(select(.prerelease == true and .tag_name != null and .tag_name != "")) |
                sort_by(.published_at) |
                reverse |
                .[0].tag_name // ""
              '
          }

          echo "tag_advanced=$(get_latest_prerelease_tag anddea/revanced-patches)" >> $GITHUB_OUTPUT
          echo "tag_official=$(get_latest_prerelease_tag revanced/revanced-patches)" >> $GITHUB_OUTPUT
          echo "tag_extended=$(get_latest_prerelease_tag inotia00/revanced-patches)" >> $GITHUB_OUTPUT

      - name: Initialize missing tag JSON
        id: init_tags
        run: |
          if [ ! -f last_dev_tags.json ]; then
            jq -n \
              --arg a "${{ steps.fetch_tags.outputs.tag_advanced }}" \
              --arg o "${{ steps.fetch_tags.outputs.tag_official }}" \
              --arg e "${{ steps.fetch_tags.outputs.tag_extended }}" \
              '{ 
                advanced: ($a | select(length > 0)), 
                official: ($o | select(length > 0)), 
                extended: ($e | select(length > 0)) 
              }' > last_dev_tags.json
            echo "missing=true" >> $GITHUB_OUTPUT
          else
            echo "missing=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit initialized tag file
        if: steps.init_tags.outputs.missing == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: main
          skip_checkout: true
          file_pattern: last_dev_tags.json
          commit_message: "Initialize dev tag tracking JSON"

      - name: Compare and update tag JSON
        id: compare
        run: |
          LAST_ADVANCED=$(jq -r '.advanced // ""' last_dev_tags.json)
          LAST_OFFICIAL=$(jq -r '.official // ""' last_dev_tags.json)
          LAST_EXTENDED=$(jq -r '.extended // ""' last_dev_tags.json)

          NEW_ADVANCED="${{ steps.fetch_tags.outputs.tag_advanced }}"
          NEW_OFFICIAL="${{ steps.fetch_tags.outputs.tag_official }}"
          NEW_EXTENDED="${{ steps.fetch_tags.outputs.tag_extended }}"

          SHOULD_TRIGGER=0
          if [ -n "$NEW_ADVANCED" ] && [ "$NEW_ADVANCED" != "$LAST_ADVANCED" ]; then
            SHOULD_TRIGGER=1
          fi
          if [ -n "$NEW_OFFICIAL" ] && [ "$NEW_OFFICIAL" != "$LAST_OFFICIAL" ]; then
            SHOULD_TRIGGER=1
          fi
          if [ -n "$NEW_EXTENDED" ] && [ "$NEW_EXTENDED" != "$LAST_EXTENDED" ]; then
            SHOULD_TRIGGER=1
          fi

          jq -n \
            --arg a "$NEW_ADVANCED" \
            --arg o "$NEW_OFFICIAL" \
            --arg e "$NEW_EXTENDED" \
            '{ 
              advanced: ($a | select(length > 0)), 
              official: ($o | select(length > 0)), 
              extended: ($e | select(length > 0)) 
            }' > last_dev_tags.json

          echo "SHOULD_TRIGGER=$SHOULD_TRIGGER" >> $GITHUB_OUTPUT
          echo "old_advanced=$LAST_ADVANCED" >> $GITHUB_OUTPUT
          echo "new_advanced=$NEW_ADVANCED" >> $GITHUB_OUTPUT
          echo "old_official=$LAST_OFFICIAL" >> $GITHUB_OUTPUT
          echo "new_official=$NEW_OFFICIAL" >> $GITHUB_OUTPUT
          echo "old_extended=$LAST_EXTENDED" >> $GITHUB_OUTPUT
          echo "new_extended=$NEW_EXTENDED" >> $GITHUB_OUTPUT

      - name: Commit updated tag JSON
        if: steps.compare.outputs.SHOULD_TRIGGER == '1'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: main
          skip_checkout: true
          file_pattern: last_dev_tags.json
          commit_message: "Update last_dev_tags.json with latest patch versions"

      - name: Generate filtered config.dev.updated.toml
        if: steps.compare.outputs.SHOULD_TRIGGER == '1'
        run: |
          cp config.toml config.dev.updated.toml

          OLD_ADVANCED="${{ steps.compare.outputs.old_advanced }}"
          NEW_ADVANCED="${{ steps.compare.outputs.new_advanced }}"
          OLD_OFFICIAL="${{ steps.compare.outputs.old_official }}"
          NEW_OFFICIAL="${{ steps.compare.outputs.new_official }}"
          OLD_EXTENDED="${{ steps.compare.outputs.old_extended }}"
          NEW_EXTENDED="${{ steps.compare.outputs.new_extended }}"

          echo 'patches-version = "dev"' > tmp_header
          cat config.dev.updated.toml >> tmp_header
          mv tmp_header config.dev.updated.toml

          awk -v old_advanced="$OLD_ADVANCED" -v new_advanced="$NEW_ADVANCED" \
              -v old_official="$OLD_OFFICIAL" -v new_official="$NEW_OFFICIAL" \
              -v old_extended="$OLD_EXTENDED" -v new_extended="$NEW_EXTENDED" '
          BEGIN {
              section = ""
              keep = 1
          }
          /^\[.*\]/ {
              flush_section()
              section = $0
              delete lines
              lines[0] = $0
              n = 1
              keep = 1
              next
          }
          {
              lines[n++] = $0
              if ($0 ~ /patches-source *= *"[^"]+"/) {
                  match($0, /patches-source *= *"([^"]+)"/, m)
                  src = m[1]
                  if (src == "anddea/revanced-patches" && (new_advanced == "" || new_advanced == old_advanced)) {
                      keep = 0
                  } else if (src == "revanced/revanced-patches" && (new_official == "" || new_official == old_official)) {
                      keep = 0
                  } else if (src == "inotia00/revanced-patches" && (new_extended == "" || new_extended == old_extended)) {
                      keep = 0
                  }
              }
          }
          END {
              flush_section()
          }

          function flush_section() {
              if (length(lines) == 0) return
              for (i = 0; i < length(lines); i++) {
                  line = lines[i]
                  if (!keep) {
                      gsub(/enabled *= *true/, "enabled = false", line)
                  }
                  print line
              }
          }
          ' config.dev.updated.toml > tmp && mv tmp config.dev.updated.toml

      - name: Commit updated config
        if: steps.compare.outputs.SHOULD_TRIGGER == '1'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: main
          commit_message: "Update config.dev.updated.toml for new patches"
          file_pattern: config.dev.updated.toml

      - name: Trigger Build workflow if needed
        if: steps.compare.outputs.SHOULD_TRIGGER == '1' && (
             steps.fetch_tags.outputs.tag_advanced != '' ||
             steps.fetch_tags.outputs.tag_official != '' ||
             steps.fetch_tags.outputs.tag_extended != ''
           )
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: build.yml
          token: ${{ secrets.PAT_TRIGGER_WORKFLOW }}

      - name: Notify Telegram Group
        if: steps.compare.outputs.SHOULD_TRIGGER == '1'
        env:
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
          TG_CHAT: "@rvbygeo"
        run: |
          NL=$'\n'
          MSG="*New Patch Detected!* __(Pre-release)__${NL}"

          if [ "${{ steps.compare.outputs.new_advanced }}" != "${{ steps.compare.outputs.old_advanced }}" ]; then
            MSG+="${NL}• [Advanced](https://github.com/anddea/revanced-patches/releases/tag/${{ steps.compare.outputs.new_advanced }}): ${NL}Old: \`${{ steps.compare.outputs.old_advanced }}\` → New: \`${{ steps.compare.outputs.new_advanced }}\`${NL}"
          fi
          if [ "${{ steps.compare.outputs.new_official }}" != "${{ steps.compare.outputs.old_official }}" ]; then
            MSG+="${NL}• [Official](https://github.com/ReVanced/revanced-patches/releases/tag/${{ steps.compare.outputs.new_official }}): ${NL}Old: \`${{ steps.compare.outputs.old_official }}\` → New: \`${{ steps.compare.outputs.new_official }}\`${NL}"
          fi
          if [ "${{ steps.compare.outputs.new_extended }}" != "${{ steps.compare.outputs.old_extended }}" ]; then
            MSG+="${NL}• [Extended](https://github.com/inotia00/revanced-patches/releases/tag/${{ steps.compare.outputs.new_extended }}): ${NL}Old: \`${{ steps.compare.outputs.old_extended }}\` → New: \`${{ steps.compare.outputs.new_extended }}\`${NL}"
          fi

          MSG+="${NL}[Triggering new build...](https://github.com/geologically/revanced-builder/actions/workflows/build.yml)${NL}${NL}@rvbygeo"

          echo "'$MSG'"
          MSG=${MSG:0:9450}

          POST="https://api.telegram.org/bot${TG_TOKEN}/sendMessage"
          curl -X POST \
            --data-urlencode "parse_mode=Markdown" \
            --data-urlencode "disable_web_page_preview=true" \
            --data-urlencode "text=${MSG}" \
            --data-urlencode "chat_id=${TG_CHAT}" \
            "$POST"
